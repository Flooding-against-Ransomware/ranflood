/******************************************************************************
 * Copyright 2021 (C) by Saverio Giallorenzo <saverio.giallorenzo@gmail.com>  *
 *                                                                            *
 * This program is free software; you can redistribute it and/or modify       *
 * it under the terms of the GNU Library General Public License as            *
 * published by the Free Software Foundation; either version 2 of the         *
 * License, or (at your option) any later version.                            *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU Library General Public          *
 * License along with this program; if not, write to the                      *
 * Free Software Foundation, Inc.,                                            *
 * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.                  *
 *                                                                            *
 * For details about the authors of this software, see the AUTHORS file.      *
 ******************************************************************************/

plugins {
    id 'java'
//    id 'com.palantir.graal' version "0.7.2"
    id 'com.palantir.graal' version "0.10.0"
}

//sourceCompatibility = 11
//targetCompatibility = 11

group 'org.ranflood'

def version = '0.5.9-BETA'

repositories {
    mavenCentral()
}

configurations {
    common
    client.extendsFrom common
    daemon.extendsFrom common
    _clientAnnotationProcessor
}

dependencies {
    common 'com.republicate:essential-json:2.6.4'
    common 'org.slf4j:slf4j-simple:1.7.36'
    common  'org.zeromq:jeromq:0.5.2'

    _clientAnnotationProcessor 'info.picocli:picocli-codegen:4.6.3'
    client 'info.picocli:picocli:4.6.2'
//    client 'info.picocli:picocli-codegen:4.6.2'

    daemon 'io.reactivex.rxjava3:rxjava:3.1.4'
    daemon 'com.oblac:nomen-est-omen:2.1.0'
    daemon 'org.jetbrains.xodus:xodus-openAPI:1.3.232'
    daemon 'org.jetbrains.xodus:xodus-environment:1.3.232'
    daemon 'org.apache.commons:commons-compress:1.21'
    daemon 'commons-io:commons-io:2.11.0'
}

//tasks.withType(JavaCompile) {
//    doFirst {
//        println "AnnotationProcessorPath for $name is ${options.getAnnotationProcessorPath().getFiles()}"
//    }
//}

sourceSets {
    common {
        java.srcDir 'src/common/java'
        compileClasspath += configurations.common
    }
    client {
        java.srcDir 'src/client/java/'
        runtimeClasspath += compileClasspath += configurations.client + configurations._clientAnnotationProcessor + sourceSets.common.output
    }
    daemon {
        java.srcDir 'src/daemon/java'
        runtimeClasspath += compileClasspath += configurations.daemon + sourceSets.common.output
    }
    tests {
        java.srcDir 'src/tests/java'
        runtimeClasspath += compileClasspath += configurations.client + configurations.daemon + sourceSets.common.output + sourceSets.client.output + sourceSets.daemon.output
    }
    filechecker {
        java.srcDir 'src/filechecker/java'
        runtimeClasspath += compileClasspath += configurations.client + sourceSets.common.output
    }
}

build {
    dependsOn compileCommonJava
    dependsOn compileClientJava
    dependsOn compileDaemonJava
}

gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

tasks.withType( JavaCompile ) {
    // To enable argument names in reporting and debugging
    options.compilerArgs += "-parameters"
    // To enable picocli's annotation processor for GraalVM configurations
//    options.compilerArgs += [ "-Aproject=org.ranflood/Ranflood" ]
//    println options.compilerArgs
}

//test {
//    useJUnitPlatform {
//        includeEngines 'jqwik'
//    }
//    include '**/*Properties*'
//    include '**/*Test*'
//    include '**/*Tests*'
//}

build {
    doFirst {
        def propertiesFile = sourceSets.client.allSource.filter(f -> f.path.contains(".properties")).getSingleFile()
        propertiesFile.text = propertiesFile.text.replaceAll("version=.+", "version=" + version)
        propertiesFile = sourceSets.daemon.allSource.filter( f -> f.path.contains(".properties") ).getSingleFile()
        propertiesFile.text = propertiesFile.text.replaceAll( "version=.+", "version=" + version )
    }
}

task clientJar ( type: Jar ) {
    doFirst {
        def propertiesFile = sourceSets.client.allSource.filter( f -> f.path.contains(".properties") ).getSingleFile()
        propertiesFile.text = propertiesFile.text.replaceAll( "version=.+", "version=" + version )
    }
    manifest {
        attributes "Implementation-Title": "Ranflood Client Jar Package",
                "Implementation-Version": version,
                'Main-Class': 'org.ranflood.client.Ranflood'
    }
    archiveBaseName.set( "ranflood" )
    from sourceSets.client.output
    from {
        sourceSets.client.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task daemonJar ( type: Jar ) {
    doFirst {
        def propertiesFile = sourceSets.daemon.allSource.filter( f -> f.path.contains(".properties") ).getSingleFile()
        propertiesFile.text = propertiesFile.text.replaceAll( "version=.+", "version=" + version )
    }
    manifest {
        attributes "Implementation-Title": "Ranflood Daemon Jar Package",
                "Implementation-Version": version,
                'Main-Class': 'org.ranflood.daemon.Ranflood'
    }
    archiveBaseName.set( "ranfloodd" )
    from sourceSets.daemon.output
    from {
        sourceSets.daemon.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


task filecheckerJar ( type: Jar ) {
    manifest {
        attributes "Implementation-Title": "Filechecker",
                "Implementation-Version": "0.2",
                'Main-Class': 'org.ranflood.filechecker.FileChecker'
    }
    archiveBaseName.set( "filechecker" )
    from sourceSets.filechecker.output
    from {
        sourceSets.filechecker.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task testCompareJar ( type: Jar ) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Implementation-Title": "TestCompare",
                "Implementation-Version": "0.1",
                'Main-Class': 'playground.compare.TestCompare'
    }
    archiveBaseName.set( "testCompare" )
    from sourceSets.tests.output
    from {
        sourceSets.tests.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task testSSSJar ( type: Jar ) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Implementation-Title": "TestCompare",
                "Implementation-Version": "0.1",
                'Main-Class': 'playground.TestSSS'
    }
    archiveBaseName.set( "testSSS" )
    from sourceSets.tests.output
    from {
        sourceSets.tests.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task testSSS_AESJar ( type: Jar ) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Implementation-Title": "TestCompare",
                "Implementation-Version": "0.1",
                'Main-Class': 'playground.TestSSS_AES'
    }
    archiveBaseName.set( "testSSS_AES" )
    from sourceSets.tests.output
    from {
        sourceSets.tests.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jar {
    enabled = false // this avoids creating an empty "project" jar file
    finalizedBy clientJar
    finalizedBy daemonJar
}

task daemonNativeImage {
    dependsOn( daemonJar )
    doFirst {
//      nativeImage.jarFile.set( daemonJar.archiveFile.get().asFile );
        nativeImage.setJarFile project.provider( () -> daemonJar.archiveFile.get().asFile ) as Provider< File >
        graal {
            mainClass "org.ranflood.daemon.Ranflood"
//            graalVersion "21.0.0.2"
//            javaVersion "11"
			graalVersion "22.0.0.2"
            javaVersion "17"
			outputName "ranfloodd"
            option '--no-fallback'
            option "-H:IncludeResources=.*/*.properties"
            option "-cp"
            option sourceSets.daemon.output.join(File.pathSeparator) + File.pathSeparator +
                    sourceSets.common.output.join(File.pathSeparator) + File.pathSeparator +
                    configurations.daemon.join(File.pathSeparator)
            windowsVsVarsPath "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat"
        }
    }
    finalizedBy nativeImage
}

task clientNativeImage {
    dependsOn( clientJar )
    doFirst {
//        nativeImage.jarFile.set( clientJar.archiveFile.get().asFile );
        nativeImage.setJarFile project.provider( () -> clientJar.archiveFile.get().asFile ) as Provider< File >
        graal {
            mainClass "org.ranflood.client.Ranflood"
            //graalVersion "21.0.0.2"
            //javaVersion "11"
            graalVersion "22.0.0.2"
			javaVersion "17"
			outputName "ranflood"
            option '--no-fallback'
            option "-H:IncludeResources=.*/*.properties"
            option "-cp"
            option sourceSets.client.output.join(File.pathSeparator) + File.pathSeparator +
                    sourceSets.common.output.join(File.pathSeparator) + File.pathSeparator +
                    configurations.client.join(File.pathSeparator)
            windowsVsVarsPath "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat"
        }
    }
    finalizedBy nativeImage
}
