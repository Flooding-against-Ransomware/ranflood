/******************************************************************************
 * Copyright 2021 (C) by Saverio Giallorenzo <saverio.giallorenzo@gmail.com>  *
 *                                                                            *
 * This program is free software; you can redistribute it and/or modify       *
 * it under the terms of the GNU Library General Public License as            *
 * published by the Free Software Foundation; either version 2 of the         *
 * License, or (at your option) any later version.                            *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU Library General Public          *
 * License along with this program; if not, write to the                      *
 * Free Software Foundation, Inc.,                                            *
 * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.                  *
 *                                                                            *
 * For details about the authors of this software, see the AUTHORS file.      *
 ******************************************************************************/

plugins {
    id 'java'
    id 'com.palantir.graal' version "0.7.2"
}

//sourceCompatibility = 11
//targetCompatibility = 11

group 'org.ranflood'
def version = '0.1-ALPHA'

repositories {
    mavenCentral()
}

configurations {
    common
    client.extendsFrom common
    daemon.extendsFrom common

    main.extendsFrom client
    main.extendsFrom daemon
}

dependencies {
    common  'com.republicate:essential-json:2.6',
            'org.slf4j:slf4j-simple:1.7.9',
            'org.zeromq:jeromq:0.5.2'

    client 'info.picocli:picocli:4.6.1'
    client 'info.picocli:picocli-codegen:4.6.1'


    daemon  'io.reactivex.rxjava3:rxjava:3.0.10',
            'com.oblac:nomen-est-omen:2.0.0',
            'org.jetbrains.xodus:xodus-openAPI:1.3.232',
            'org.jetbrains.xodus:xodus-environment:1.3.232'

//    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
//    testImplementation "net.jqwik:jqwik:1.3.10"
}


sourceSets {
    common {
        java.srcDir 'src/common/java'
        compileClasspath += configurations.common
    }
    client {
        java.srcDir 'src/client/java/'
        compileClasspath += configurations.client + sourceSets.common.output
    }
    daemon {
        java.srcDir 'src/daemon/java'
        compileClasspath += configurations.daemon + sourceSets.common.output
    }
    test {
        java.srcDir 'src/test/java'
        runtimeClasspath += (
            configurations.common + configurations.client +
            sourceSets.common.output + sourceSets.client.output + sourceSets.daemon.output
        )
    }
}

gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

compileTestJava {
    // To enable argument names in reporting and debugging
    options.compilerArgs += '-parameters'
    // To enable picocli's annotation processor for GraalVM configurations
    options.compilerArgs += '-Aproject=${project.group}/${project.name}'
}

//test {
//    useJUnitPlatform {
//        includeEngines 'jqwik'
//    }
//    include '**/*Properties*'
//    include '**/*Test*'
//    include '**/*Tests*'
//}


task daemonNativeImage {
    doFirst {
        graal {
            mainClass "org.ranflood.daemon.RanFlood"
            graalVersion "21.0.0.2"
            javaVersion "11"
            outputName "ranfloodd"
            option '--no-fallback'
            option "-cp"
            option sourceSets.daemon.output.join(":") + ":" +
                    sourceSets.common.output.join(":") + ":" +
                    configurations.daemon.join(":")
//            println "OPTIONS:" + graal.options.get()
            windowsVsVarsPath "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat"
        }
    }
    finalizedBy nativeImage
}

task clientNativeImage {
    doFirst {
        graal {
            mainClass "org.ranflood.client.RanFlood"
            graalVersion "21.0.0.2"
            javaVersion "11"
            outputName "ranflood"
            option '--no-fallback'
            option "-cp"
            option sourceSets.client.output.join(":") + ":" +
                    sourceSets.common.output.join(":") + ":" +
                    configurations.client.join(":")
//            println "OPTIONS:" + graal.options.get()
            windowsVsVarsPath "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat"
        }
    }
    finalizedBy nativeImage
}

task clientJar ( type: Jar ) {
    manifest {
        attributes "Implementation-Title": "Ranflood Client Jar Package",
                "Implementation-Version": version,
                'Main-Class': 'org.ranflood.client.RanFlood'
    }
    archiveBaseName.set( "ranflood" )
    from sourceSets.client.output
    from {
        sourceSets.client.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task daemonJar ( type: Jar ) {
    manifest {
        attributes "Implementation-Title": "Ranflood Daemon Jar Package",
                "Implementation-Version": version,
                'Main-Class': 'org.ranflood.daemon.RanFlood'
    }
    archiveBaseName.set( "ranfloodd" )
    from sourceSets.daemon.output
    from {
        sourceSets.daemon.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jar {
    dependsOn clientJar
    dependsOn daemonJar
}